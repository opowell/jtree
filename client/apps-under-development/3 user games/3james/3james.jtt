app.numGroups   = 1;
app.showUpFee   = 2; // Euros
app.stageWrapPlayingScreenInFormTag = false;

// Part 1
app.STAG = 'B';
app.HARE = 'A';
app.payoff_a = 3;
app.payoff_b = 2;
app.payoff_c = 0;
app.payoff_d = 2;
app.part1Payoff = function(player) {
    if (player.part1Ans === app.STAG) {
        if (player.part1PartnerAns === app.STAG) {
            return app.payoff_a;
        } else {
            return app.payoff_c;
        }
    } else {
        if (player.part1PartnerAns === app.STAG) {
            return app.payoff_b;
        } else {
            return app.payoff_d;
        }
    }
};
app.part2Payoff = 2;
app.part4Urn1 = 0.1; // % Green
app.part4Urn2 = 0.9;
app.drawFromUrn = function(prGreen) {
    if (Math.random() < prGreen) {
        return 'Green';
    } else {
        return 'Purple';
    }
}
app.part5End    = 20;
app.part5MultT1 = 1.3;
app.part5MultT2 = 1.8;
app.part5ExchRate = 0.2; // Euros per point.
app.part6Payoff = 2;

app.addStage('intro');
app.addStage('part1');
app.addStage('part2');
app.addStage('part3');
app.addStage('part4');
app.addStage('part5');
app.addStage('part6');
app.addStage('part7');
app.addStage('questionnaire');
app.addStage('results');

app.html = `
<html lang='en'>

<style>

    form {
        display: flex;
        flex-direction: column;
        align-items: stretch;
    }

    button {
        align-self: flex-start;
    }

    p {
        max-width: 1100px;
    }

    .question {
        background-color: #eee;
        padding: 1rem;
        width: fit-content;
    }

    .question > span {
        padding: 1rem;
    }

    .answer {
        min-width: 30rem;
        padding: 1rem;
    }

    .likertScale {
        display: flex;
        background-color: #eee;
        width: auto;
        flex-wrap: nowrap;
        align-items: baseline;
    }

    .likertScaleOption {
        min-width: unset;
        padding: unset;
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1 1 auto;
        padding-top: 1rem;
        padding-bottom: 1rem;
    }

    .answer:hover {
        background-color: #fff;
    }

    .likertText {
        margin: 0rem;
        padding: 0rem;
        padding-top: 1rem;
        width: 120px;
    }

    .likertMinText {
        text-align: right;
        padding-right: 0.5rem;
    }

    .likertMaxText {
        padding-left: 0.5rem;
    }

    * {
        font-size: 1.2rem !important;
    }

    body {
        max-width: unset;
    }
</style>
<script>

    jt.comprehension = function(field) {
        let el = $('#' + field);
        let taskName = el.attr('task-name');
        let taskNameUnd = el.attr('task-name-und');
        let taskDesc = el.attr('task-desc');
        let idPrefix = el.attr('id-prefix');
        el.html(\`
            <p>In \${taskName}, you were asked \${taskDesc}.</p>
            <p>How well do you feel you understood \${taskNameUnd}?</p>
            <div id='\${idPrefix}Ans1' class='likertScale' likert-low='I did not understand at all' likert-high='I understood very well'></div>
            <p>How easy was it for you to come up with your answer to \${taskNameUnd}?</p>
            <div id='\${idPrefix}Ans2' class='likertScale' likert-low='Very difficult' likert-high='Very easy'></div>
            <p>How unsure or how confident are you that you gave the best answer?</p>
            <div id='\${idPrefix}Ans3' class='likertScale' likert-low='Very unsure' likert-high='Very confident'></div>
        \`);
    }

    jt.likertScale = function(field) {
        let el = $('#' + field);
        let minText = el.attr('likert-low');
        let maxText = el.attr('likert-high');

        let minTextEl = $('<div class="likertMinText likertText">').html(minText);
        let maxTextEl = $('<div class="likertMaxText likertText">').html(maxText);

        el.append(minTextEl);
        for (let i=1; i<=7; i++) {
            let option = $('<label for="' + field + i + '" class="likertScaleOption answer">');
            let input = $("<input name='" + field + "' type='radio' required value='" + i + "' id='" + field + i + "'>");
            let label = $("<div>").text(i);
            option.append(label);
            option.append(input);
            el.append(option);
        }
        el.append(maxTextEl);
    }

    jt.setup = false;

    // Record amount of time spent on each stage.
    jt.connected = function() {
        jt.socket.on('playerUpdate', function(player) {
            if (!jt.setup) {
                jt.setup = true;
                // Set up comprehension sections
                let els = $('.comprehension');
                els.each(function(i) {
                    jt.comprehension($(this).attr('id'));
                });

                // Set up Likert scales.
                let els = $('.likertScale');
                els.each(function(i) {
                    jt.likertScale($(this).attr('id'));
                    $(this).addClass('question');
                });
            }
        });
    }

</script>
<body class='hidden'>
<div id='jtree'>
<span v-show='player.status=="playing"' style='display: flex; flex-direction: column; align-items: center;'>

    <h4 v-show='player.stageIndex == 0'>Introduction</h4>
    <h4 v-show='player.stageIndex > 0 && player.stageIndex < 8'>Instructions for Part {{player.stageIndex}}</h4>
    <h4 v-show='player.stageIndex == 8'>Questionnaire</h4>
    <h4 v-show='player.stageIndex == 9'>Results</h4>

    <div>
        {{stages}}
    </div>
</span>
<span v-show='["waiting", "finished", "done"].includes(player.status)' style='display: flex; flex-direction: column; align-items: center;'>
    <h4>Waiting</h4>
    <p>The experiment will continue soon.</p>
</span>
</div>
{{scripts}}
</body>

</html>
`;
