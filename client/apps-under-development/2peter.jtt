// CONSTANTS
app.REPTYPE_RANDOM = 0;
app.REPTYPE_RECENT = 1;

// PARAMETERS
app.description = 'Trust game - Bednarik.';
app.N = 3; // The length of the feedback that P1 receives about P2's prior behavior.
app.numPrdsNoFeedback = 10; // The number of periods with no feedback.
app.numPrdsFeedback = 10; // The number of periods with feedback.
app.groupSize = 2;
app.repType = app.REPTYPE_RANDOM;
app.repCost = 5; // cost of purchasing reputation.

// ASSUME PROJECT CREATES GAIN OF 2x INVESTMENT
// INVESTMENT = 10
// ENDOWMENT_P1 = 10
// ENDOWMENT_P2 = 0
// IF P2 TRUSTS, HE RETURNS INVESTMENT + 1/2 OF GAIN.
app.payoffs = function(a1, a2) {
    if (a1 === 'TRUST') {
        if (a2 === 'TRUST') {
            return [15, 5];
        } else if (a2 === 'NOT TRUST') {
            return [0, 20];
        }
    } else if (a1 === 'NOT TRUST') {
        return [10, 0];
    }
}
app.numPeriods = app.numPrdsNoFeedback + app.numPrdsFeedback;

// FOR TRACKING HISTORY
app.participantStart = function(participant) {
    participant.history = []; // history of this participant's play as player 2.
}

app.shuffle = function(array) {
    for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        let temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

app.getGroupIdsForPeriod = function(period) {
    // First half of participants are Player 1s, second half are player 2s.
    var participants = this.session.participants;
    var numGroups = period.numGroups();
    var pIds = [];
    for (var p in participants) {
        pIds.push(p);
    }
    let half = pIds.length / 2;
    let p1Ids = Array.apply(null, {length: half}).map(Number.call, Number);
    this.shuffle(p1Ids);
    let p2Ids = Array.apply(null, {length: half}).map(Number.call, Number);
    this.shuffle(p2Ids);
    // Group IDs.
    var gIds = [];
    for (var g=0; g<numGroups; g++) {
        let groupIds = [pIds[p1Ids[g]], pIds[half+p2Ids[g]]];
        gIds.push(groupIds);
    }
    return gIds;
}

// PAY FOR INFO
var p1buyInfo = app.newStage('p1buyinfo');
p1buyInfo.canPlayerParticipate = function(player) {
    return player.idInGroup === 1 && player.period().id > app.numPrdsNoFeedback;
}
p1buyInfo.activeScreen = `
<p>You are player {{ player.idInGroup }} in your group.</p>
<p>BUY INFO</p>
<p>Do you wish to buy info about Player 2's reputation?</p>
<form>
    <button name='player.p1buyRep' value='YES' type='submit'>Yes</button>
    <button name='player.p1buyRep' value='NO' type='submit'>No</button>
</form>
`
p1buyInfo.groupEnd = function(group) {
    if (group.period.id > app.numPrdsNoFeedback) {
        var p1 = group.playerWithId(1);
        var p2 = group.playerWithId(2);
        if (app.repType == app.REPTYPE_RANDOM) {
            p1.p2Rep = p2.participant.history[Utils.randomInt(0, p2.participant.history.length)];
        } else {
            p1.p2Rep = p2.participant.history[p2.participant.history.length-1];
        }
    }
}

// TRUST CHOICE
var p1propose = app.newStage('p1invest');
p1propose.canPlayerParticipate = function(player) {
    return player.idInGroup === 1;
}
p1propose.groupStart = function(group) {
    // Get players.
    var p1 = group.playerWithId(1);
    var p2 = group.playerWithId(2);
    p1.histLength = Math.min(app.N, p2.participant.history.length);
    p1.p2Avg = 0;
    for (var i=0; i<p1.histLength; i++) {
        p1.p2Avg += p2.participant.history[p2.participant.history.length - 1 - i];
    }
    p1.p2Avg = p1.p2Avg / p1.histLength;
}
p1propose.activeScreen = `
<p>You are player {{ player.idInGroup }} in your group.</p>
<p>INVEST</p>
<div jt-displayIf='period.id > app.numPrdsNoFeedback'>
    <h4>Reputation information about Player 2</h4>
    <p>Note: RETURN = 1, NOT RETURN = 0</p>
    <p jt-displayIf='player.histLength > 0 && period.id > app.numPrdsNoFeedback'>Average of last {{ player.histLength }} actions: <span jt-text='player.p2Avg' jt-decimals=2></span>.</p>
    <div jt-displayIf='player.p1buyRep == "YES"'>
        <p jt-displayIf='app.repType=app.REPTYPE_RANDOM>Random reputation signal: {{ player.p2Rep }}</p>
        <p jt-displayIf='app.repType=app.REPTYPE_RECENT>Most recent reputation signal: {{ player.p2Rep }}</p>
    </div>
    <p jt-displayIf='player.p1buyRep == "NO"'>You did not pay for reputation information.</p>
</div>
<p>Choose your action.</p>
<form>
    <button name='player.p1action' value='TRUST' type='submit'>Invest</button>
    <button name='player.p1action' value='NOT TRUST' type='submit'>Not invest</button>
</form>
`

// RETURN
var p2choose = app.newStage('p2return');
p2choose.groupStart = function(group) { // when a group starts this stage
    var p1 = group.playerWithId(1);
    group.p1action = p1.p1action;
}
p2choose.canPlayerParticipate = function(player) {
    return (player.idInGroup === 2 && player.group.p1action === 'TRUST');
}
p2choose.activeScreen = `
<p>You are player <span jt-text='player.idInGroup'></span> in your group.</p>
<p>RETURN</p>
<p>Player 1 chose to INVEST. Choose your action.</p>
<form>
    <button name='player.return' value='TRUST' type='submit'>Return</button>
    <button name='player.return' value='NOT TRUST' type='submit'>Not return</button>
</form>
`

// RESULTS
var resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) {

    // Get players.
    var p1 = group.playerWithId(1);
    var p2 = group.playerWithId(2);

    // Determine payoffs
    group.return = p2.return;
    var payoffs = app.payoffs(p1.p1action, p2.return);
    p1.points = payoffs[0];
    p2.points = payoffs[1];
    group.p1points = p1.points;
    group.p2points = p2.points;

    // Track history, average of last N actions by P2.
    var history = p2.participant.history;
    if (p1.p1action === 'TRUST') {
        history.push(p2.return === 'TRUST' ? 1 : 0);
    }
}
resultsStage.activeScreen = `
<p>RESULTS</p>
<p>Player 1 chose to <span jt-text='group.p1action'></span>.</p>
<p jt-displayIf='group.p1action==="TRUST"'>Player 2 chose to <span jt-text='group.return'></span>.</p>
<p jt-displayIf='group.p1action!=="TRUST"'>Therefore Player 2 made no decision.</p>
<p>Therefore the payoffs are E$<span jt-text='group.p1points'></span> for Player 1
    and E$<span jt-text='group.p2points'></span> for Player 2.</p>
<form>
    <button>OK</button>
</form>
`