app.title = 'Implicit Association Test';
app.description = 'Players classify two sets of items into two choices.';
app.groupSize = 1;

app.words = [
    { // List 1, nouns vs. adjectives
        'A': [
            'dog',
            'cat',
            'mouse',
            'horse'
        ],
        'B': [
            'happy',
            'sad',
            'hurt',
            'glad'
        ]
    },
    { // List 2, male vs. female
        'A': [
            'aunt',
            'female',
            'daughter',
            'mother'
        ],
        'B': [
            'male',
            'father',
            'son',
            'uncle'
        ]
    }
]

app.choices = [
    {
        'A': 'noun',
        'B': 'adjective'
    },
    {
        'A': 'female',
        'B': 'male'
    }
]

app.order = [
    '1A-0',
    '1A-1',
    '1B-0',
    '1A-2',
    '1B-1',
    '1B-2',
    '1A-3',
    '1B-3',
    '2A-0',
    '2B-1',
    '2B-2',
    '2A-3',
    '2B-0',
    '2A-1',
    '2A-2',
    '2B-3',
]

app.html = `
    <!DOCTYPE html>
    <html>
        <head>
            <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        </head>
        <body>
            <div id='jtree'>
                <span v-show='player.status=="playing"'>
                    {{stages}}
                </span>
                <span v-show='["waiting", "finished", "done"].includes(player.status)'>
                    {{waiting-screens}}
                </span>
            </div>
            {{scripts}}
        </body>
    </html>
`

app.numPeriods = app.order.length;

app.formatOption = function(word) {

}

app.wordAnswer = function(word) {
    if (app.words[0]['A'].includes(word)) return 'A';
    if (app.words[1]['A'].includes(word)) return 'A';
    if (app.words[0]['B'].includes(word)) return 'B';
    if (app.words[1]['B'].includes(word)) return 'B';
    return null;
}

app.participantStart = function(participant) {
    participant.totalErrors = 0;
}

var instructions = app.newStage('instructions');
instructions.canPlayerParticipate = function(player) {
    return player.period().id === 1;
}
instructions.activeScreen = `
    <div>
        <div>Press 'E' to select {{ app.choices[0]['A'] }} / {{ app.choices[1]['A'] }}.</div>
        <div>Press 'I' to select {{ app.choices[0]['B'] }} / {{ app.choices[1]['B'] }}.</div>
    </div>    
`;

var decideStage = app.newStage('decide');
decideStage.playerStart = function(player) {
    player.question = app.order[player.group.period.id-1];
    let list = player.question.substring(0, 1) - 1;
    player.answer = player.question.substring(1, 2);
    let wordIndex = player.question.substring(3);
    player.word = app.words[list][player.answer][wordIndex];
    player.errorCount = 0;
}
decideStage.activeScreen = `
    <div style='display: flex; flex-direction: column; align-items: center'>
        <div style='font-size: 3em'>{{ player.word }}</div>
        <br><br>
        <div v-show='player.errorCount > 0' style='color: red'>INCORRECT</div>
        <div style='width:100%; display: flex'>
            <div style='flex: 1 1 auto'>{{ app.choices[0]['A'] }} / {{ app.choices[1]['A'] }}</div>
            <div>{{ app.choices[0]['B'] }} / {{ app.choices[1]['B'] }}</div>
        </div>
        <input type='hidden' name='player.errorCount' :value='player.errorCount'>
    </div>
    <script>
        $('body').keydown(function(ev) {

            // If not a relevant key, ignore it.
            if (!['e', 'i'].includes(ev.key)) {
                return;
            }

            if (ev.key == 'e' && jt.data.player.answer == 'A') jt.endStage();
            else if (ev.key == 'i' && jt.data.player.answer == 'B') jt.endStage();
            else jt.vue.player.errorCount++;
        });
    </script>
`;
decideStage.addOKButtonIfNone = false;
decideStage.playerEnd = function(player) {
    player.participant.totalErrors += player.errorCount;
}