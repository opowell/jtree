session.addApp('1_implicit.jtt', {
    type: 'practice',
    usedLists: [0],
});
session.addApp('1_implicit.jtt', {
    type: 'practice',
    usedLists: [1],
});
session.addApp('1_implicit.jtt', {
    type: 'real',
    usedLists: [0, 1],
});
session.addApp('2_survey.jtt');
session.addApp('tax-game-max05.jtt');
session.addApp('3_results.jtt');

// Each row is a sequence of app indices for a participant.
session.sequences = [
    [0, 1, 2, 3, 4],
    [1, 0, 2, 3, 4],
];

session.availableSequences = [];

// Sample without replacement app sequences. Once all sequences used, refill.
session.participantStart = function(participant) {
    participant.totalErrors = [];
    let session = participant.session;

    // If the list of available sequences is empty, repopulate it.
    if (session.availableSequences.length === 0) {
        for (let i=0; i<session.sequences.length; i++) {
            session.availableSequences.push(session.sequences[i]);
        }
    }

    // Choose a sequence.
    let index = Utils.randomInt(0, session.availableSequences.length);
    
    // Set this participant's sequence.
    participant.sequence = session.availableSequences[index];
    
    // Remove the sequence from the list.
    session.availableSequences.splice(index, 1);
}

session.getApp = function(participant) {
    return session.apps[participant.sequence[participant.appIndex-1]];
}