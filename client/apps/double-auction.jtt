app.description = 'Shares are traded for experimental currency in a double auction. Shares pay random dividends every period. At the end of the game, shares are worth nothing. Reference: <a target="_blank" href="https://www.jstor.org/stable/1911361">Smith, Suchanek and Williams, 1988</a>.';

app.numPeriods = 15;
app.tradingTime = 12000;
app.divs        = [0, 8, 28, 60];
app.endowmentShares = 3;
app.endowmentCash = 24*app.numPeriods*app.endowmentShares;

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>
        <script src="https://unpkg.com/vue-chartjs/dist/vue-chartjs.min.js"></script>
    </head>
    <body>
        <div id='jtree'>
            <p>Period: {{period.id}}/{{app.numPeriods}}</p>
            <p v-show='hasTimeout'>Time left (s): {{clock.seconds}}</p>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        <canvas id="chart" width='400' height='400'></canvas>
        <div class="app">
            <line-chart :width='800' :height='600' :chart-data="datacollection"></line-chart>
            <button @click="fillData()">Randomize</button>
        </div>
        {{scripts}}
        <script>
            Vue.component('line-chart', {
                extends: VueChartJs.Line,
                mixins: [VueChartJs.mixins.reactiveProp],
                data () {
                    return {
                      //Chart.js options that control the appearance of the chart
                      options: {
                        responsive: false,
                        maintainAspectRatio: false
                      }
                    }
                },
                mounted () {
                    this.renderChart(this.chartData, this.options)
                }
            })
            
            var vm = new Vue({
                el: '.app',
                data () {
                    return {
                      datacollection: null
                    }
                  },
                  created () { 
                    this.fillData()
                  },
                  methods: {
                    fillData () {
                      this.datacollection = {
                        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                        datasets: [
                          {
                            label: 'Data One',
                            backgroundColor: '#f87979',
                            data: [this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt()]
                          }
                        ]
                      }
                    },
                    getRandomInt () { 
                      return Math.floor(Math.random() * (50 - 5 + 1)) + 5
                    }
                  }
            })
          </script>
    </body>
</html>`


app.clientScripts = `
jt.connected = function() {
    jt.socket.on('playerUpdate', function(player) {
        jt.avgDiv = function() {
            var app = jt.data.player.group.period.app;
            var avgDiv = 0;
            for (var i in app.divs) {
                avgDiv = avgDiv + app.divs[i];
            }
            avgDiv = avgDiv / app.divs.length;
            return avgDiv;
        }
        jt.calcFV = function() {
            var avgDiv = jt.avgDiv();
            var curPeriod = jt.data.player.group.period.id;
            var periodsLeft = jt.data.player.group.period.app.numPeriods - curPeriod + 1;
            return periodsLeft*avgDiv;
        }

        var tradeTime = jt.data.player.stage.duration;
        var app = player.group.period.app;
        var numPeriods = app.numPeriods;
        var avgDiv = jt.avgDiv();
        const fv = jt.calcFV();

        var labels = [];
        var fvData = [];
        for (var i=1; i<=numPeriods; i++) {
            labels.push(i);
            fvData.push({
                x: (i-1)*tradeTime,
                y: avgDiv*(numPeriods - i + 1)
            });
            fvData.push({
                x: i*tradeTime,
                y: avgDiv*(numPeriods - i + 1)
            });
        }

        var ctx = document.getElementById('chart').getContext('2d');
        var width = $(window).width();
        ctx.canvas.width = width - 20;
        // var height = $(window).height();
        // console.log('set height to ' + height);
        var height = width;
        ctx.canvas.height = height - 20;
        jt.chart = new Chart(ctx, {

            type: 'scatter',

            // The data for our dataset
            data: {
                 datasets: [
                     {
                         label: "FV",
                         type: "line",
                         data: fvData,
                         showLine: true,
                         fill: false,
                         lineTension: 0,
                         borderColor: "rgb(0, 0, 0)",
                         pointRadius: 0
                     },
             ]
             },
            // Configuration options go here
            options: {
                legend: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        ticks: {
                            max: numPeriods*tradeTime,
                            min: 0,
                            stepSize: tradeTime
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            max: fv*2,
                            min: fv/2,
                            type: "log"
                        }
                    }]
                }
            }
        });
    });
}
    </script>
    <script type="text/javascript" src="/shared/chartjs/Chart.bundle.min.js">
`
app.vueComputed = {
    offersOpen: function() {
        return this.group.offers.filter((offer) => offer.open && offer.period == this.period.id);
    },
    offersToBuy: function() {
        let out = this.offersOpen.filter((offer) => offer.seller == null);
        return out.sort((a, b) => b.price - a.price);
    },
    offersToSell: function() {
        let out = this.offersOpen.filter((offer) => offer.buyer == null);
        return out.sort((a, b) => a.price - b.price);
    },
    selOTS: function() {
        return this.offersToSell.find(x => x.id === this.selOTSId);
    },
    selOTB: function() {
        return this.offersToBuy.find(x => x.id === this.selOTBId);
    }
}

var tradingStage = app.newStage('trading');
// tradingStage.duration = app.tradingTime;
tradingStage.wrapPlayingScreenInFormTag = false;
tradingStage.groupStart = function(group) {
    group.addTable('offers');
}
tradingStage.waitOnTimerEnd = false;
tradingStage.playerStart = function(player) { // when a player starts this stage.
    var app = player.stage.app;
    // First trading period
    if (player.periodIndex() == 1) {
        player.cash     = app.endowmentCash;
        player.shares   = app.endowmentShares;
    }
    // Not first trading period
    else {
        player.cash     = player.old().cash;
        player.shares   = player.old().shares;
    }
}

tradingStage.activeScreen = `
    <p>TRADING</p>
    <p>Cash: {{player.cash}}</p>
    <p>Shares: {{player.shares}}</p>
    <p>Make offer to buy:
        <input id='otbPrice' style='width: 100px' v-model='otbPrice' type='number' min='1' :max='player.cash' step='1'>
        <button :disabled='player.cash < otbPrice || !(otbPrice > 0)' @click='jt.sendMessage("makeOfferToBuy", otbPrice)'>Make buy offer</button>
    </p>
    <p>Make offer to sell:
        <input id='otsPrice' style='width: 100px' v-model='otsPrice' type='number' min='1' max='1000' step='1'>
        <button :disabled='player.shares == 0 || !(otsPrice > 0)' @click='jt.sendMessage("makeOfferToSell", otsPrice)'>Make sell offer</button>
    </p>
    <p>Offers to buy:
        <!-- Normally you would use v-model='selOTBId', but Vue has problems with timers and selects. -->
        <select size=5 style='width: 100px' @input="selOTBId = $event.target.value-0">
            <option v-for='offer in offersToBuy' :value='offer.id' :key='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                {{ offer.price }}
            </option>
        </select>
        <button @click='jt.sendMessage("acceptOTB"  , selOTBId)' :disabled='selOTB == null || selOTB.makerPId == player.id || player.shares < 1'>Accept / Sell</button>
        <button @click='jt.sendMessage("cancelOffer", selOTBId)' :disabled='selOTB == null || selOTB.makerPId != player.id'>Cancel</button>
    </p>
    <p>Offers to sell:
        <select size=5 style='width: 100px' @input="selOTSId = $event.target.value-0">
            <option v-for='offer in offersToSell' :value='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                {{ offer.price }}
            </option>
        </select>
        <button @click='jt.sendMessage("acceptOTS"  , selOTSId)' :disabled='selOTS == null || selOTS.makerPId == player.id || player.cash < selOTS.price'>Accept / Buy</button>
        <button @click='jt.sendMessage("cancelOffer", selOTSId)' :disabled='selOTS == null || selOTS.makerPId != player.id'>Cancel</button>
    </p>
`;

var resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) { // when a group starts this stage
    group.dividendDraw = Utils.randomEl(app.divs);
    for (var i in group.players) { // i = 0, 1, 2, 3
        var player = group.players[i];
        player.dividends = player.shares * group.dividendDraw;
        player.cash = player.cash + player.dividends;
        // Points only recorded for last period.
        if (group.period.id === group.app().numPeriods) {
            player.points = player.cash;
        }
    }
}
resultsStage.activeScreen = `
    <p>RESULTS</p>
    <div>The dividend draw in this period (E$/share): {{ group.dividendDraw }}.</div>
    <div>Dividends (E$): {{ player.dividends }}.</div>
    <div>Cash (E$): {{ player.cash }}.</div>
    <div>Shares: {{ player.shares }}.</div>
`;

//  Listen for messages from clients.
app.messages.makeOfferToBuy = function(price) {
    var player = this.participant.player;
    var offer = {price: price, makerPId: player.id, open: true, buyer: player.id, period: player.periodIndex()};
    player.group.offers.new(offer);
}
app.messages.makeOfferToSell = function(price) {
    var player = this.participant.player;
    var offer = {price: price, makerPId: player.id, open: true, seller: player.id, period: player.periodIndex()};
    player.group.offers.new(offer);
}
app.messages.cancelOffer = function(id) {
    var group = this.participant.player.group;
    var offer = group.offers.getRow(id);
    app.closeOffer(offer, group);
}
app.messages.acceptOTS = function(id) {
    app.acceptOffer(id, 'buy', this.participant.player);
}
app.messages.acceptOTB = function(id) {
    app.acceptOffer(id, 'sell', this.participant.player);
}

// Helper functions
app.closeOffer = function(offer, group) {
    offer.open = false;
    group.offers.save();
    group.emit('offersUpdate', offer);
}
app.acceptOffer = function(id, action, player) {

    var group = player.group;
    var offer = group.offers.getRow(id);
    var creator = group.player(offer.makerPId);

    if (action === 'buy') {
        // exit if trade not possible
        if (creator.shares < 1 || player.cash < offer.price) {
            return;
        }
        player.shares++;
        player.cash = player.cash - offer.price;
        creator.shares--;
        creator.cash = creator.cash + offer.price;
        offer.buyer = player.id;
    } else if (action === 'sell') {
        // exit if trade not possible
        if (creator.cash < offer.price || player.shares < 1) {
            return;
        }
        player.shares--;
        player.cash = player.cash + offer.price;
        creator.shares++;
        creator.cash = creator.cash - offer.price;
        offer.seller = player.id;
    }
    offer.timeElapsed = player.timeInStage();
    group.emit('acceptOffer', {oId: offer.id, time: offer.timeElapsed, seller: offer.seller, buyer: offer.buyer});
    app.closeOffer(offer, group);

    // Cancel other offers that might now be invalid.
    for (var i=0; i<group.offers.rows.length; i++) {
        var offer = group.offers.rows[i];
        if (!app.isOfferValid(offer, group)) {
            app.closeOffer(offer, group);
        }
    }

    player.saveAndUpdate();
    creator.saveAndUpdate();
}

app.isOfferValid = function(offer, group) {
    if (offer.open) {
        var creator = group.player(offer.makerPId);
        if (offer.seller === offer.makerPId) {
            if (creator.shares < 1) {
                return false;
            }
        }
        if (offer.buyer === offer.makerPId) {
            if (creator.cash < offer.price) {
                return false;
            }
        }
    }
    return true;
}
