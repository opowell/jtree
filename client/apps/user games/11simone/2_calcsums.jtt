app.description = 'Real-effort task, in which subjects have a fixed amount of time to calculate sums of numbers. Needs at least 3 players for ranking to work.';

app.workTime = 2000;
app.numbersPerTasks = 4;
app.maxNumber = 10;
app.numTasks = 40;
app.numGroups = 1;
app.numComparison = 2;

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class='hidden'>
        <div id='jtree'>
            <p v-show='app.numPeriods > 1'>{{ app.periodText }}: {{period.id}}/{{app.numPeriods}}</p>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

// The type of payment.
app.addSelectOption('paymentType', ['individual', 'contest', 'choose']);

app.tasks = [];
for (var i=0; i<app.numTasks; i++) {
    var problem = [];
    for (var j=0; j<app.numbersPerTasks; j++) {
        problem.push(Utils.randomInt(1, app.maxNumber));
    }
    app.tasks.push(problem);
}

app.getScoreFromRank = function(rank, score) {
    switch (rank) {
        case 1:
            return score;
        case 2:
            return 0;
        case 3:
            return 0;
    }
}

app.setContestScoreAndRank = function(player, contestants) {

    // Draw N+1 contestants at random w/o replacement,
    // where N = app.numComparison.
    let draws = Utils.randomEls(contestants, app.numComparison + 1);
    
    // Remove actual player, if drawn.
    for (let i=0; i<draws.length; i++) {
        if (draws[i].id === player.id) {
            draws.splice(i, 1);
            break;
        }
    }

    // Only keep first N players.
    if (draws.length > app.numComparison) {
        draws.splice(app.numComparison, 1);
    }

    // Calculate player's rank.
    let rank = 1;
    for (let i in draws) {
        if (player.numCorrect < draws[i].numCorrect) {
            rank++;
        }
    }

    player.points = app.getScoreFromRank(rank, player.numCorrect);
    player.rank = rank;
}

app.setNumCorrect = function(player) {
    
    player.numCorrect = 0;

    // For each correct answer, increment by 1.
    for (let i=0; i<app.tasks.length; i++) {

        // the problem.
        let prob = app.tasks[i];

        // calculate the answer.
        let ans = 0;
        for (let j=0; j<prob.length; j++) {
            ans = prob[j] + ans;
        }

        // check if player's answer is correct.
        if (ans === player['A' + (i+1)]) {
            player.numCorrect++;
        }
    }
}

if (app.paymentType === 'choose') {
    var chooseStage = app.newStage('choose');
    chooseStage.activeScreen = `
    <p>CHOOSE</p>
    <p>What type of payment would you like?</p>
    <p>
        <button name='player.paymentType' value='individual'>Individual</button>
        <button name='player.paymentType' value='contest'>Contest</button>
    </p>
    `;
}

// Answers are recorded as player.A1, player.A2, etc.
var workStage = app.newStage('work');
workStage.duration = app.workTime;
workStage.playerStart = function(player) {
    // If no payment type chosen, assign the one for the app.
    if (player.paymentType == null) {
        player.paymentType = app.paymentType;
    }
}
workStage.activeScreen = `
    <p>TASKS</p>
    <p>Payment type: {{player.paymentType}}</p>
    <p>Calculate as many of the following sums as you can before time runs out.
    <p v-for='(task, index) in app.tasks'>
        <span>Q{{index+1}}: <b>{{ task.join(' + ') }}</b> = </span>
        <input :name="'player.A' + (index+1)" type="number" :max="app.maxNumber * app.numbersPerTask" style="width: 3em;">
    </p>
    <style>
    #jtree div:nth-child(2) {
        display: none;
    }
    </style>
`;

if (app.paymentType === 'contest') {
    let guessRankStage = app.newStage('guessRank');
    guessRankStage.activeScreen = `
        Guess your rank:
        <button type='submit' name='player.guessedRank' value='1'>1</button>
        <button type='submit' name='player.guessedRank' value='2'>2</button>
        <button type='submit' name='player.guessedRank' value='3'>3</button>
    `;
}

var resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) { // when a group of players starts this stage
    let app = group.app();
    let players = group.players;

    // Calculate individual scores for each player.
    for (let i in players) {
        app.setNumCorrect(players[i]);
    }

    // Determine who was in the contest.
    let contestants = [];
    for (let i in players) {
        if (players[i].paymentType === 'contest') {
            contestants.push(players[i]);
        }
    }    

    // Calculate actual points score for each player.
    for (let i in players) {
        let player = players[i];
        switch (player.paymentType) {
            case 'individual':
                player.points = player.numCorrect;
                break;
            case 'contest':
                app.setContestScoreAndRank(player, contestants);
                break;
        }

        // Calculate rank-guess bonus.
        if (app.paymentType === 'contest') {
            if (player.rank == player.guessedRank) {
                player.rankBonus = 1;
            } else {
                player.rankBonus = 0;
            }
            player.points = player.points + player.rankBonus;
        }

        // Save the points across apps.
        if (player.participant.scores == null) {
            player.participant.scores = [];
        }
        player.participant.scores.push(player.points);
    }

}
resultsStage.activeScreen = `
    <p>RESULTS</p>
    <p>You calculated {{ player.numCorrect }} {{ player.numCorrect == 1 ? "sum" : "sums" }} correctly.</p>
    <p v-if='app.paymentType === "choose"'>You chose the payment type "{{player.paymentType}}".</p>
    <p v-if='app.paymentType !== "choose"'>The payment type for this round was "{{player.paymentType}}".</p>
    <p>Therefore, you scored {{ player.points }} {{ player.points == 1 ? "point" : "points" }} in this round.</p>
`;
