app.numWords = 20;
app.title = 'Implicit Association Test';
app.description = 'Players classify two sets of items into two choices.';
app.groupSize = 1;

// TODO:
// Record times.
// In Instructions, now all three word lists are shown. Include option to specifiy which word lists to show or similar
// Is v-if ok instead of v-show for the INCORRECT(FALSCH) display?
// Layout: Show Button assigment during stages and center them 

// CHANGELOG
/// changed width from 70 to 50
/// changed delayStage to same layout as decideStage
/// 

app.addSelectOption('type', ['real', 'practice']);
app.addTextOption('usedLists', [0, 1], 'the lists to use');
app.addTextOption('flip', [false, true], 'whether or not to flip the left/right assignment of each list');
app.addTextOption('instructionLists', [], 'the lists to show on the general instructions screen.');

app.allLists = [
    { // List 0, good vs. bad
        'optionA': 'Gut',
        'optionB': 'Schlecht',
        'wordsA': [
            'Gut',
            'Glücklich',
            'Vergnügen',
            'Liebe',
            'Wundervoll',
        ],
        'wordsB': [
            'Schlecht',
            'Qual',
            'Übel',
            'Schrecklich',
            'Scheußlich',
        ]
    },
    { // List 1, Steuerehrlichkeit vs Hinterziehung
        'optionA': 'Steuerehrlichkeit',
        'optionB': 'Steuerhinterziehung',
        'wordsA': [
            'Steuerehrlichkeit',
            'Ehrlicher Steuerzahler',
            'Gesetzestreue Steuerzahlerin',
            'Steuermoral',
            'Einhaltung von Steuergesetzen',
        ],
        'wordsB': [
            'Steuerhinterziehung',
            'Unehrlicher Steuerzahler',
            'Steuersünderin',
            'Steuermissbrauch',
            'Abgabenhinterziehung',
        ]
    },
    { // List 2, Wahrheit vs Lüge
        'optionA': 'Wahrheit',
        'optionB': 'Lüge',
        'wordsA': [
            'Wahrheit',
            'Ehrliche Person',
            'Faktenbasiert',
            'Wahrheitsgetreu',
            'Offenheit',
        ],
        'wordsB': [
            'Unwahrheit',
            'Lüge',
            'Täuschung',
            'Unehrliche Person',
            'Irreführung ',
        ]
    }
]

app.origWords = [];
app.optionAText = '';
app.optionBText = '';
app.optionEDecideHTML = "<div style='font-size: 10pt'>Press 'E' for</div>";
app.optionIDecideHTML = "<div style='font-size: 10pt'>Press 'I' for</div>";

app.actualLists = [];
for (let i=0; i<app.usedLists.length; i++) {

    let list = app.allLists[app.usedLists[i]];

    let flip = app.flip[i];

    app.actualLists.push(list);

    app.optionAText += (i>0? " / " : "") + (flip ? list.optionB : list.optionA);
    app.optionBText += (i>0? " / " : "") + (flip ? list.optionA : list.optionB);

    app.optionEDecideHTML += (i>0? "<div>or</div>" : "")
    app.optionEDecideHTML += '<div>' + (flip ? list.optionB : list.optionA) + '</div>';

    app.optionIDecideHTML += (i>0? "<div>or</div>" : "")
    app.optionIDecideHTML += '<div>' + (flip ? list.optionA : list.optionB) + '</div>';

    for (let j=0; j<list.wordsA.length; j++) {
        app.origWords.push({
            word: list.wordsA[j],
            answer: flip ? 'B' : 'A'            
        });
    }
    for (let j=0; j<list.wordsB.length; j++) {
        app.origWords.push({
            word: list.wordsB[j],
            answer: flip ? 'A' : 'B'            
        });
    }
}

app.genInstrLists = [];
for (let i=0; i<app.instructionLists.length; i++) {
    let list = app.allLists[app.instructionLists[i]];
    app.genInstrLists.push(list);
}


// the number of "questions" to use.
// app.numPeriods = app.words.length; // use all words
app.numPeriods = app.numWords; // use X words.

app.html = `
    <!DOCTYPE html>
    <html>
        <head>
            <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
            <style>
                body.show {
                    max-width: none;
                    display: flex !important;
                    align-items: center;
                    justify-content: center;
                }

                #jtree {
                    width: 50%;
                    display: flex;
                    justify-content: center;
                }

                td, th {
                    border: 1px solid #ddd;
                    padding: 5px;
                }

            </style>
        </head>
        <body class='hidden'>
            <div id='jtree'>
                <span style='width: 100%; text-align: center;' v-show='player.status=="playing"'>
                    {{stages}}
                </span>
                <span v-show='["waiting", "finished", "done"].includes(player.status)'>
                    {{waiting-screens}}
                </span>
            </div>
            {{scripts}}
        </body>
    </html>
`;

let usedWordIds = [];
for (let i=0; i<app.usedLists.length; i++) {
    let list = app.allLists[app.usedLists[i]];
    let listWordsA = [];
    for (let j=0; j<list.wordsA.length; j++) {
        listWordsA.push(j);
    }
    let listWordsB = [];
    for (let j=0; j<list.wordsB.length; j++) {
        listWordsB.push(j);
    }

    usedWordIds.push([
        listWordsA,
        listWordsB
    ]);
}

app.drawnWords = [];
for (let i=0; i<app.numWords; i++) {
    // Draw a random list.
    let listIndex = Utils.randomInt(0, app.usedLists.length);
    let listIds = usedWordIds[listIndex];
    // List A or B
    let ab = Math.random() < 0.5 ? 0 : 1;

    // Draw a random word from the given A/B list.
    let j = Utils.randomInt(0, listIds[ab].length);
    let wordIndex = listIds[ab][j];
    let ablist = ab === 0 ? 'wordsA' : 'wordsB';
    let answer = (app.flip[listIndex] ? 1-ab : ab) === 0 ? 'A' : 'B';
    app.drawnWords.push({
        word: app.allLists[app.usedLists[listIndex]][ablist][wordIndex],
        answer: answer
    });
    
    // Remove the index of this word from the id list
    listIds[ab].splice(j, 1);

    // If list is empty, repopulate it.
    if (listIds[ab].length === 0) {
        for (let k=0; k<app.allLists[app.usedLists[listIndex]][ablist].length; k++) {
            listIds[ab].push(k);
        }
    }
}

app.IATname = function() {
    return 'IAT_' + app.type + '_' + app.usedLists;
}

app.participantStart = function(participant) {
    if (participant.totalErrors != null) {
        participant.totalErrors[participant.appIndex - 1] = 0;
    }

    participant[app.IATname()] = 0;
    participant[app.IATname() + '_count'] = 0;

    participant.times[participant.appIndex - 1].lists = app.usedLists;
    participant.times[participant.appIndex - 1].flip = app.flip;
    participant.times[participant.appIndex - 1].sumOfTimes = 0;
    
    // participant.words = Utils.drawRandomly(app.origWords, {
    //     withReplacement: true, 
    //     numDraws: app.numPeriods
    // });
    participant.words = app.drawnWords;
}

if (app.instructionLists.length > 0) {
    let generalInstructions = app.newStage('generalInstructions');
    generalInstructions.canPlayerParticipate = function(player) {
        return player.period().id === 1;
    }
    generalInstructions.activeScreen = `
    <p>
    Benutzen Sie die Tasten "E" und "I" auf der Tastatur, um die Begriffe, die auf dem Bildschirm erscheinen, so schnell wie möglich den richtigen Kategorien zuzuordnen. Es gibt vier Kategorien mit den folgenden Begriffen:
    </p>
    <table style='border: 1px solid #ddd; margin: auto; font-size: 14pt;'>
    <tr style='background-color: #eee; font-weight: bold;'>
        <td style='padding-right: 50px'>Kategorie</td>
        <td>Begriffe</td>
    </tr>
    <template v-for='list in app.genInstrLists'>
    <tr>
    <td>{{list.optionA}}</tdorder:>
    <td><span v-for="(item, index) in list.wordsA">
        <span>{{item}}</span><span v-if="index+1 < list.wordsA.length">, </span>
    </span>
    </td>
    </tr>
    <tr>
    <td>{{list.optionB}}</td>
    <td><span v-for="(item, index) in list.wordsB">
        <span>{{item}}</span><span v-if="index+1 < list.wordsB.length">, </span>
    </span>
    </td>
    </tr>
    </template>
    </table>
    <p>Dieser Abschnitt besteht aus ingesamt sieben Teilen. Die Instruktionen können sich mit jeder Runde ändern, seien Sie aufmerksam! </p>
    `
}

let instructions = app.newStage('instructions');
instructions.addOKButtonIfNone = false;
instructions.canPlayerParticipate = function(player) {
    return player.period().id === 1; // period.ids start with 1.
}
instructions.activeScreen = `
    <div>
        <div style='color: grey'>Type: {{ app.type }}</div>
        <br><br>
        <div>Benutzen Sie die Tastatur, um die Begriffe auf dem Bildschirm den passenden Kategorien zuzuordnen.</div>
        <div>Drücken Sie 'E' um '{{ app.optionAText }}' auszuwählen.</div>
        <div>Drücken Sie 'I' um  '{{ app.optionBText }}' auszuwählen.</div>
        <br><br>
        <div>Drücken Sie die Leertaste, um fortzufahren.</div>
    </div>    
`;
instructions.autoplay = `
    let key = ' ';
    let e = jQuery.Event( "keydown", { key: key } );
    $('body').trigger(e);
`;

let delayStage = app.newStage('delay');
delayStage.clientDuration = 0.25; // in seconds
delayStage.activeScreen = `
    <div style='display: flex; flex-direction: column; align-items: center'>
        <div style='font-size: 2em'>+</div>
        <br><br>
        <div style='color: white'>PLACEHOLDER</div>
        <br><br>
        <div style='width:100%; display: flex; text-align: left;'>
            <div v-html='app.optionEDecideHTML' style='display: flex; flex-direction: column; align-items: center'></div>
            <div style='flex: 1 1 auto;'></div>
            <div v-html='app.optionIDecideHTML' style='display: flex; flex-direction: column; align-items: center'></div>
        </div>
    </div>
    `;
delayStage.addOKButtonIfNone = false;

let decideStage = app.newStage('decide');
decideStage.playerStart = function(player) {
    player.keyPresses = [];
    let question = player.participant.words[player.group.period.id-1];
    player.word = question.word;
    player.answer = question.answer;
    player.errorCount = 0;
}
decideStage.autoplay = `
    let key = Math.random() < 0.5 ? 'e' : 'i';
    let e = jQuery.Event( "keydown", { key: key } );
    $('body').trigger(e);
`
decideStage.activeScreen = `
    <div style='display: flex; flex-direction: column; align-items: center'>
        <div style='font-size: 2em'>{{ player.word }}</div>
        <br><br>
        <div v-if='player.errorCount > 0' style='color: red'>FALSCH</div>
        <div v-else style='color: white'>CORRECT</div>
        <br><br>
        <div style='width:100%; display: flex; text-align: left;'>
            <div v-html='app.optionEDecideHTML' style='display: flex; flex-direction: column; align-items: center'></div>
            <div style='flex: 1 1 auto;'></div>
            <div v-html='app.optionIDecideHTML' style='display: flex; flex-direction: column; align-items: center'></div>
        </div>
        <input type='hidden' name='player.errorCount' :value='player.errorCount'>
    </>
    <script>
        $('body').keydown(function(ev) {
            if (jt.vue.player.stage.id === 'instructions' && ev.key === ' ') {
                jt.endStage();
            }
            if (jt.vue.player.keyPresses != null) {
                jt.vue.player.keyPresses.push(
                    {
                        key: ev.key,
                        time: jt.vue.timeElapsed
                    }
                )
    
                // If not a relevant key, ignore it.
                if (!['e', 'i'].includes(ev.key)) {
                    return;
                }  
    
                if (ev.key == 'e' && jt.data.player.answer == 'A') jt.endStage();
                else if (ev.key == 'i' && jt.data.player.answer == 'B') jt.endStage();
                else jt.vue.player.errorCount++;
            }
        });

    </script>
`;
decideStage.addOKButtonIfNone = false;
decideStage.playerEnd = function(player) {

    // Total errors for this participant in this instance of this app.
    player.participant.totalErrors[player.participant.appIndex - 1] += player.errorCount;

    player.participant.times[player.participant.appIndex - 1].sumOfTimes += Math.random()*5;

    if (player.errorCount == 0) {
        player.participant[app.IATname()] += player.msInStage_decide;
        player.participant[app.IATname() + '_count'] += 1;
    }


}