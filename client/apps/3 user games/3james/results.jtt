//NOTSTANDALONEAPP

stage.waitToStart = false;

stage.groupStart = function(group) {
  let app = group.app();

  // Part 1
  let part1Groups = Utils.getRandomGroups(group.players, 2);
  for (let i=0; i<part1Groups.length; i++) {
      let p1 = part1Groups[i][0];
      let p2 = part1Groups[i][1];
      p1.part1GroupId = i;
      p2.part1GroupId = i;
      p1.part1PartnerId = p2.id;
      p2.part1PartnerId = p1.id;
      p1.part1PartnerAns = p2.part1Ans;
      p2.part1PartnerAns = p1.part1Ans;
      p1.part1Points = app.part1Payoff(p1);
      p2.part1Points = app.part1Payoff(p2);
  }

  // Part 5
    let t1players = group.players.filter(function(el) {
        return el.part5Mult === app.part5MultT1;
    });
    let t2players = group.players.filter(function(el) {
        return el.part5Mult === app.part5MultT2;
    });

    let part5GroupsT1 = Utils.getRandomGroups(t1players, 2);
    for (let i=0; i<part5GroupsT1.length; i++) {
        let players = part5GroupsT1[i];
        let groupContributions = Utils.sum(players, 'part5Cont');
        let groupProd = groupContributions * app.part5MultT1;
        for (let j=0; j<players.length; j++) {
            let player = players[j];
            player.part5GroupPlayerIds = Utils.values(players, 'id');
            player.part5GroupContributions = groupContributions;
            player.part5GroupProd = groupProd;
            player.part5GroupId = i;
            player.part5Points = app.part5End - player.part5Cont + groupProd / players.length;
            player.part5Eur = (player.part5Points*app.part5ExchRate).toFixed(2)-0;
        }
    }

    let part5GroupsT2 = Utils.getRandomGroups(t2players, 2);
    for (let i=0; i<part5GroupsT2.length; i++) {
        let players = part5GroupsT2[i];
        let groupContributions = Utils.sum(players, 'part5Cont');
        let groupProd = groupContributions * app.part5MultT2;
        for (let j=0; j<players.length; j++) {
            let player = players[j];
            player.part5GroupPlayerIds = Utils.values(players, 'id');
            player.part5GroupContributions = groupContributions;
            player.part5GroupProd = groupProd;
            player.part5GroupId = i;
            player.part5Points = app.part5End - player.part5Cont + groupProd / players.length;
            player.part5Eur = (player.part5Points*app.part5ExchRate).toFixed(2)-0;
        }
    }

}

stage.playerStart = function(player) {

    // Part 2
    let app = player.app();
    let group = player.group;

    if (player.treatment == 1) {
        let n = Math.random()*100;
        player.part2n = n;
        let randomOtherPlayer = Utils.randomEl(group.playersExceptIds([player.id, player.part1PartnerId]));
        player.part2PartnerAns = randomOtherPlayer.part1Ans;
        if (n < player.part2Ans) {
            if (randomOtherPlayer.part1Ans === app.STAG) {
                player.part2Points = app.part2Payoff;
            } else {
                player.part2Points = 0;
            }
        } else {
            player.part2SecondN = Math.random()*100;
            if (player.part2SecondN < n) {
                player.part2Points = app.part2Payoff;
            } else {
                player.part2Points = 0;
            }
        }
    } else {
        let otherPlayers = Utils.randomEls(group.playersExceptIds([player.id, player.part1PartnerId]), 20);
        player.part2OtherPlayersIds = [];
        for (let i=0; i<otherPlayers.length; i++) {
            player.part2OtherPlayersIds.push(otherPlayers[i].id);
        }
        player.part2CountStag = Utils.count(otherPlayers, 'element.part1Ans === "' + app.STAG + '"');
        if (player.part2Ans === player.part2CountStag) {
            player.part2Points = app.part2Payoff;
        } else {
            player.part2Points = 0;
        }
    }

    // Part 6
      let filterPlayer = function(el) {
          // Not a member of this player's group, AND
          // Same multiplier.
          let a =
              !player.part5GroupPlayerIds.includes(el.id) &&
              el.part5Mult === player.part5Mult;
          return a;
      };
      let otherPlayers = group.players.filter(filterPlayer);
      // Sort randomly.
      otherPlayers.sort(function() { return 0.5 - Math.random() });
      player.part6OtherPlayersIds = [];
      for (let i=0; i<otherPlayers.length; i++) {
          player.part6OtherPlayersIds.push(otherPlayers[i].id);
      }

      stage.part6Payoff(
          player,                                     // the player
          otherPlayers.slice(0, 2),                   // the other players
          player.part6Med,                            // field to check for exact match
          'element.part5Cont > ' + player.part6Med,   // condition for general matching
          'part6CountMed',                            // field in which to store count
          'part6MedPoints',                           // field in which to store points
          1                                           // number that must coincide
      );

      stage.part6Payoff(
          player,                                     // the player
          otherPlayers.slice(2, 6),                   // the other players
          player.part6UpQ,                            // field to check for exact match
          'element.part5Cont > ' + player.part6UpQ,   // condition for general matching
          'part6CountUpQ',                            // field in which to store count
          'part6UpQPoints',                           // field in which to store points
          1                                           // number that must coincide
      );

      stage.part6Payoff(
          player,                                     // the player
          otherPlayers.slice(6),                   // the other players
          player.part6LowQ,                            // field to check for exact match
          'element.part5Cont < ' + player.part6LowQ,   // condition for general matching
          'part6CountLowQ',                            // field in which to store count
          'part6LowQPoints',                           // field in which to store points
          1                                           // number that must coincide
      );

    player.points =
        (app.showUpFee +
        player.part1Points +
        player.part2Points +
        player.part4Points +
        player.part5Eur +
        player.part6MedPoints +
        player.part6UpQPoints +
        player.part6LowQPoints).toFixed(2);
}

stage.part6Payoff = function(player, otherPlayers, exactField, condition, countField, pointsField, count) {
    let app = player.app();
    let exactMatch = true;
    for (let i=0; i<otherPlayers.length; i++) {
        if (otherPlayers[i].part5Cont != exactField) {
            exactMatch = false;
        }
    }

    if (exactMatch) {
        player[pointsField] = app.part6Payoff;
        player[countField] = 'match';
    } else {
        player[countField] = Utils.count(otherPlayers, condition);
        if (player[countField] == count) {
            player[pointsField] = app.part6Payoff;
        } else {
            player[pointsField] = 0;
        }
    }
}

stage.addOKButtonIfNone = false;
stage.activeScreen = `
<p>The show-up fee was {{app.showUpFee}} Euros.</p>

<p>PART 1</p>
<p>You played {{player.part1Ans}}. Your opponent played {{player.part1PartnerAns}}. You earned {{player.part1Points}} Euros.</p>

<p>PART 2</p>
<p v-show='player.treatment==1'>
    The randomly chosen participant played {{player.part2PartnerAns}}.
    Your random draw (n) was <span jt-text='player.part2n' jt-decimals=2></span>.
</p>
<p v-show='player.treatment==2'>
    Of the 20 randomly chosen players, {{player.part2CountStag}} played {{app.STAG}}.
</p>
Your guess was {{player.part2Ans}}.
You earned {{player.part2Points}} Euros.

<p>PART 4</p>
<p>
    The first ball you drew was {{player.part4BallColor}}.
    <span v-show='player.treatment == 1'>
        The additional ball was {{player.part4RandomBall}}, and n was <span jt-text='player.part4n' jt-decimals='2'></span>.
    </span>
    <span v-show='player.treatment == 2'>
        Of the 20 additional balls, {{player.part4MatchingBalls}} were also {{player.part4BallColor}}.
    </span>
    Your guess was {{player.part4Ans}}.
    You earned {{player.part4Points}} Euros.
</p>

<p>PART 5</p>
<p>
    You contributed {{player.part5Cont}} of your endowment of {{app.part5End}}.
    In total, your group contributed <span jt-text='player.part5GroupContributions' jt-decimals=2></span> and produced <span jt-text='player.part5GroupProd' jt-decimals=2></span>.
    Your total income is {{app.part5End}} - {{player.part5Cont}} + ({{player.part5Cont}} + {{player.part5GroupContributions - player.part5Cont}}) x {{player.part5Mult}}/2 = <span jt-text='player.part5Points' jt-decimals=2></span> points.
    Each point is converted to {{app.part5ExchRate}} Euros, therefore you earned {{player.part5Eur}} Euros.
</p>

<p>PART 6</p>
<p>
    Task 1: You chose {{player.part6Med}}.
    Of the two randomly chosen players, {{player.part6CountMed}} contributed more than your choice. You earned {{player.part6MedPoints}} Euros.
</p>
<p>
    Task 2: You chose {{player.part6UpQ}}.
    Of the four randomly chosen players, {{player.part6CountUpQ}} contributed more than your choice. You earned {{player.part6UpQPoints}} Euros.
</p>
<p>
    Task 3: You chose {{player.part6LowQ}}.
    Of the four randomly chosen players, {{player.part6CountLowQ}} contributed less than your choice. You earned {{player.part6LowQPoints}} Euros.
</p>
<p><b>TOTAL PAYOFF</b></p>
Including show-up fee and all parts: <b>{{player.points}} Euros</b>.
`

stage.waitToEnd = false;
