app.description = 'Shares are traded for experimental currency in a double auction. Shares pay random dividends every period. At the end of the game, shares are worth nothing. Reference: <a target="_blank" href="https://www.jstor.org/stable/1911361">Smith, Suchanek and Williams, 1988</a>.';

const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;
    
app.numPeriods = 15;
app.tradingTime = 1200;
app.divs        = [0, 8, 28, 60];
app.endowmentShares = 3;
app.endowmentCash = average(app.divs)*app.numPeriods*app.endowmentShares;
app.stageWrapPlayingScreenInFormTag = 'no';
app.modifyPathsToIncludeId = false;
app.numGroups = 1;

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/double-auction-bs/Chart.min.js"></script>
        <script src="/double-auction-bs/client.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
        <style>
            #jtree {
                border: none;
                flex: 1 1 auto;
                background-color: unset;
            }

            body {
                max-width: unset;
            }
        </style>
    </head>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

// Objects defined here are generated on the client, and accessible via "jt.vue.XXX", 
// where XXX is the name of the computed variable.
app.vueComputed = {
    offersOpen: function() {
        return this.group.offers.filter((offer) => offer.open && offer.period == this.period.id);
    },
    offersToBuy: function() {
        let out = this.offersOpen.filter((offer) => offer.seller == null);
        return out.sort((a, b) => b.price - a.price);
    },
    offersToSell: function() {
        let out = this.offersOpen.filter((offer) => offer.buyer == null);
        return out.sort((a, b) => a.price - b.price);
    },
    trades: function() {
        return this.group.offers.filter((offer) => offer.buyer != null && offer.seller != null && offer.period == this.period.id)
    },
    selOTS: function() {
        return this.offersToSell.find(x => x.id === this.selOTSId);
    },
    selOTB: function() {
        return this.offersToBuy.find(x => x.id === this.selOTBId);
    }
}

var tradingStage = app.newStage('trading');
tradingStage.duration = app.tradingTime;
tradingStage.groupStart = function(group) {
    group.addTable('offers');
}
tradingStage.waitOnTimerEnd = false;
tradingStage.playerStart = function(player) {
    var app = player.stage.app;
    // First trading period
    if (player.periodIndex() == 1) {
        player.cash     = app.endowmentCash;
        player.shares   = app.endowmentShares;
    }
    // Not first trading period
    else {
        player.cash     = player.old().cash;
        player.shares   = player.old().shares;
    }
    player.offerType = '';
    player.sharesAvailable = player.shares;
    player.cashAvailable = player.cash;
}

tradingStage.activeScreen = `
    <div style='display: flex;'>
        <div style='display: flex; flex-direction: column'>
            <div class="card text-white bg-dark" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Inventory</h5>
                <div>{{ app.periodText }}: {{period.id}}/{{app.numPeriods}}</div>
                <div>Time left (s): {{clock.totalSeconds}}</div>
                <div>Cash: {{player.cash}} ({{player.cashAvailable}})</div>
                <div>Shares: {{player.shares}} ({{player.sharesAvailable}})</div>
            </div>
        </div>

    <br>
    <div class="card text-white bg-info" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Make offer</h5> 
            <div class="form-group row">
              <div class="col-sm-3 col-form-label">Type:</div>
              <div class="col-sm-9">
                <div class="btn-group" role="group">
                    <button id='offerTypeBuyBtn' onclick='setOfferType("buy")' type="button" class="btn btn-secondary">Buy</button>
                    <button id='offerTypeSellBtn' onclick='setOfferType("sell")' type="button" class="btn btn-secondary">Sell</button>
                </div>
              </div>
            </div>
            <div class="form-group row">
              <div class="col-sm-3 col-form-label">Price:</div>
              <div class="col-sm-9">
                <div class="btn-group" role="group">
                    <input 
                        :disabled='(player.offerType != "buy" && player.offerType != "sell")'
                        id='offerPrice'
                        style='width: 100px'
                        v-model='offerPrice'
                        type='number'
                        min='1'
                        :max='player.offerType == "buy" ? player.cashAvailable : "unset"' step='1'
                    >
                </div>
              </div>
            </div>
            <div>
                <button class='btn' :disabled='
                    (player.offerType != "buy" && player.offerType != "sell") ||
                    (offerPrice == "") ||
                    (isNaN(offerPrice)) ||
                    (player.offerType == "buy" && player.cashAvailable < offerPrice) || 
                    (player.offerType == "sell" && player.sharesAvailable == 0)'
                    onclick='makeOffer()'
                >
                    Make offer
                </button>
            </div>
        </div>
    </div>

    <br>
    <div class="card text-white bg-dark" style="width: 18rem;">
    <div class="card-body">
<p>Offers to buy:
    <!-- Normally you would use v-model='selOTBId', but Vue has problems with timers and selects. -->
    <select size=5 style='width: 100px' @input="selOTBId = $event.target.value-0">
        <option v-for='offer in offersToBuy' :value='offer.id' :key='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
            {{ offer.price }}
        </option>
    </select>
    <br>
    <button @click='jt.sendMessage("acceptOTB"  , selOTBId)' :disabled='selOTB == null || selOTB.makerPId == player.id || player.shares < 1'>Accept / Sell</button>
    <button @click='jt.sendMessage("cancelOffer", selOTBId)' :disabled='selOTB == null || selOTB.makerPId != player.id'>Cancel</button>
</p>
<p>Offers to sell:
    <select size=5 style='width: 100px' @input="selOTSId = $event.target.value-0">
        <option v-for='offer in offersToSell' :value='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
            {{ offer.price }}
        </option>
    </select>
    <br><button @click='jt.sendMessage("acceptOTS"  , selOTSId)' :disabled='selOTS == null || selOTS.makerPId == player.id || player.cash < selOTS.price'>Accept / Buy</button>
    <button @click='jt.sendMessage("cancelOffer", selOTSId)' :disabled='selOTS == null || selOTS.makerPId != player.id'>Cancel</button>
</p>
<div>Trades:
    <div v-for='trade in trades' class='trade'>{{trade.price}}</div>
</div>
    </div>
</div>

        </div>
        <div style='margin-left: 10px; display: flex;'>

            <div class="card text-white bg-dark" style="width: 48rem;">
                <div class="card-body">
                    <h5 class="card-title">Chart</h5>
                    <canvas id="tradesChart" width="800" height="600"></canvas>
                </div>
            </div>
            <div class="card text-white bg-dark" style="width: 12rem;">
                <div class="card-body">
                    <h5 class="card-title">Options</h5>
                    Y-scale: Dynamic | Fixed<br>
                    X-axis-ahead: <input type='number'><br>
                    X-axis-back: <input type='number'><br>
                    Show FV: <input type='checkbox'><br>
                    Show Trades: <input type='checkbox'><br>
                    Show Best bid: <input type='checkbox'><br>
                    Show best ask: <input type='checkbox'><br>
                </div>
            </div>
        </div>
    </div>
`;

var resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) { // when a group starts this stage
    group.dividendDraw = Utils.randomEl(app.divs);
    for (var i in group.players) { // i = 0, 1, 2, 3
        var player = group.players[i];
        player.dividends = player.shares * group.dividendDraw;
        player.cash = player.cash + player.dividends;
        // Points only recorded for last period.
        if (group.period.id === group.app().numPeriods) {
            player.points = player.cash;
        }
    }
}
resultsStage.wrapPlayingScreenInFormTag = 'yes';
resultsStage.addOKButtonIfNone = false;
resultsStage.activeScreen = `
<div style='display: flex; justify-content: center;'>
    <div class="card text-white bg-dark" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Dividends: {{ player.dividends }} E$</h5>
        <div>Inventory: {{ player.shares }} shares</div>
        <div>Dividend draw: {{ group.dividendDraw }} E$/share</div>
        <div>Dividends received: {{ player.dividends }} E$</div>
        <div>Cash (E$): {{ player.cash }}</div>
        <br>
        <button class='btn'>OK</button>
    </div>
</div>
`;

//  Listen for messages from clients.
app.messages.makeOfferToBuy = function(price) {
    debugger;
    var player = this.participant.player;
    if (player.cashAvailable < price) {
        return;
    }
    player.cashAvailable -= price;
    console.log('make offer to buy');
    var offer = {price: price, makerPId: player.id, open: true, buyer: player.id, period: player.periodIndex()};
    player.group.offers.new(offer); // Notifies group's players about new offer.
}
app.messages.makeOfferToSell = function(price) {
    var player = this.participant.player;
    if (player.sharesAvailable < 1) {
        return;
    }
    player.sharesAvailable--;
    console.log('make offer to sell');
    var offer = {price: price, makerPId: player.id, open: true, seller: player.id, period: player.periodIndex()};
    player.group.offers.new(offer);
}
app.messages.cancelOffer = function(id) {
    var group = this.participant.player.group;
    var offer = group.offers.getRow(id);
    app.closeOffer(offer, group);
}
app.messages.acceptOTS = function(id) {
    app.acceptOffer(id, 'buy', this.participant.player);
}
app.messages.acceptOTB = function(id) {
    app.acceptOffer(id, 'sell', this.participant.player);
}

// Helper functions
app.closeOffer = function(offer, group) {
    offer.open = false;
    group.offers.save();
    group.emit('offersUpdate', offer);
    var creator = group.player(offer.makerPId);
    if (offer.seller == creator.id && offer.buyer == null) {
        creator.sharesAvailable++;
    }
    if (offer.buyer == creator.id && offer.seller == null) {
        creator.cashAvailable += offer.price;
    }
}
app.acceptOffer = function(id, action, player) {
    
    var group = player.group;
    var offer = group.offers.getRow(id);
    var creator = group.player(offer.makerPId);

    if (action === 'buy') {
        // exit if trade not possible
        if (creator.sharesAvailable < 1 || player.cashAvailable < offer.price) {
            return;
        }
        player.shares++;
        player.sharesAvailable++;
        player.cash -= offer.price;
        player.cashAvailable -= offer.price;
        creator.shares--;
        creator.sharesAvailable--;
        creator.cash += offer.price;
        creator.cashAvailable += offer.price;
        offer.buyer = player.id;
    } else if (action === 'sell') {
        // exit if trade not possible
        if (creator.cash < offer.price || player.shares < 1) {
            return;
        }
        player.shares--;
        player.sharesAvailable--;
        player.cash += offer.price;
        player.cashAvailable += offer.price;
        creator.shares++;
        creator.sharesAvailable++;
        creator.cash -= offer.price;
        creator.cashAvailable -= offer.price;
        offer.seller = player.id;
    }
    offer.timeElapsed = player.timeInStage();
    group.emit('acceptOffer', {oId: offer.id, time: offer.timeElapsed, seller: offer.seller, buyer: offer.buyer});
    app.closeOffer(offer, group);

    player.saveAndUpdate();
    creator.saveAndUpdate();
}