app.description = 'Shares are traded for experimental currency in a double auction. Shares pay random dividends every period. At the end of the game, shares are worth nothing. Reference: <a target="_blank" href="https://www.jstor.org/stable/1911361">Smith, Suchanek and Williams, 1988</a>.';

const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;
    
app.numPeriods = 15;
app.tradingTime = 30;
app.divs        = [0, 8, 28, 60];
app.endowmentShares = 3;
app.endowmentCash = average(app.divs)*app.numPeriods*app.endowmentShares;
app.stageWrapPlayingScreenInFormTag = 'no';

// Objects defined here are generated on the client, and accessible via "jt.vue.XXX", 
// where XXX is the name of the computed variable.
app.vueComputed = {
    offersOpen: function() {
        return this.group.offers.filter((offer) => offer.open && offer.period == this.period.id);
    },
    offersToBuy: function() {
        let out = this.offersOpen.filter((offer) => offer.seller == null);
        return out.sort((a, b) => b.price - a.price);
    },
    offersToSell: function() {
        let out = this.offersOpen.filter((offer) => offer.buyer == null);
        return out.sort((a, b) => a.price - b.price);
    },
    trades: function() {
        return this.group.offers.filter((offer) => offer.buyer != null && offer.seller != null && offer.period == this.period.id)
    },
    selOTS: function() {
        return this.offersToSell.find(x => x.id === this.selOTSId);
    },
    selOTB: function() {
        return this.offersToBuy.find(x => x.id === this.selOTBId);
    }
}

let tradingStage = app.newStage('trading');
tradingStage.duration = app.tradingTime;
tradingStage.groupStart = function(group) {
    group.addTable('offers');
}
tradingStage.waitOnTimerEnd = false;
tradingStage.playerStart = function(player) {
    let app = player.stage.app;
    // First trading period
    if (player.periodIndex() == 1) {
        player.cash     = app.endowmentCash;
        player.shares   = app.endowmentShares;
    }
    // Not first trading period
    else {
        player.cash     = player.old().cash;
        player.shares   = player.old().shares;
    }
    player.sharesAvailable = player.shares;
    player.cashAvailable = player.cash;
}

tradingStage.activeScreen = `
    <p>TRADING</p>
    <p>Cash (available): {{player.cash}} ({{player.cashAvailable}})</p>
    <p>Shares (available): {{player.shares}} ({{player.sharesAvailable}})</p>
    <p>Make offer to buy:
        <input id='otbPrice' style='width: 100px' v-model='otbPrice' type='number' min='1' :max='player.cash' step='1'>
        <br>
        <button :disabled='player.cash < otbPrice || !(otbPrice > 0)' @click='jt.sendMessage("makeOfferToBuy", otbPrice)'>Make buy offer</button>
    </p>
    <p>Make offer to sell:
        <input id='otsPrice' style='width: 100px' v-model='otsPrice' type='number' min='1' max='1000' step='1'>
        <br>
        <button :disabled='player.shares == 0 || !(otsPrice > 0)' @click='jt.sendMessage("makeOfferToSell", otsPrice)'>Make sell offer</button>
    </p>
    <p>Offers to buy:
        <!-- Normally you would use v-model='selOTBId', but Vue has problems with timers and selects. -->
        <select size=5 style='width: 100px' @input="selOTBId = $event.target.value-0">
            <option v-for='offer in offersToBuy' :value='offer.id' :key='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                {{ offer.price }}
            </option>
        </select>
        <br>
        <button @click='jt.sendMessage("acceptOTB"  , selOTBId)' :disabled='selOTB == null || selOTB.makerPId == player.id || player.sharesAvailable < 1'>Accept / Sell</button>
        <button @click='jt.sendMessage("cancelOffer", selOTBId)' :disabled='selOTB == null || selOTB.makerPId != player.id'>Cancel</button>
    </p>
    <p>Offers to sell:
        <select size=5 style='width: 100px' @input="selOTSId = $event.target.value-0">
            <option v-for='offer in offersToSell' :value='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                {{ offer.price }}
            </option>
        </select>
        <br><button @click='jt.sendMessage("acceptOTS"  , selOTSId)' :disabled='selOTS == null || selOTS.makerPId == player.id || player.cashAvailable < selOTS.price'>Accept / Buy</button>
        <button @click='jt.sendMessage("cancelOffer", selOTSId)' :disabled='selOTS == null || selOTS.makerPId != player.id'>Cancel</button>
    </p>
    <div>Trades:
        <div v-for='trade in trades' class='trade'>{{trade.price}}</div>
    </div>
`;

let resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) { // when a group starts this stage
    group.dividendDraw = Utils.randomEl(app.divs);
    for (let i in group.players) { // i = 0, 1, 2, 3
        let player = group.players[i];
        player.dividends = player.shares * group.dividendDraw;
        player.cash = player.cash + player.dividends;
        // Points only recorded for last period.
        if (group.period.id === group.app().numPeriods) {
            player.points = player.cash;
        }
    }
}
resultsStage.wrapPlayingScreenInFormTag = 'yes';
resultsStage.activeScreen = `
    <p>RESULTS</p>
    <div>The dividend draw in this period (E$/share): {{ group.dividendDraw }}.</div>
    <div>Dividends (E$): {{ player.dividends }}.</div>
    <div>Cash (E$): {{ player.cash }}.</div>
    <div>Shares: {{ player.shares }}.</div>
    <br>
`;

//  Listen for messages from clients.
app.messages.makeOfferToBuy = function(price) {
    let player = this.participant.player;
    if (player.cashAvailable < price) {
        console.log('tried to make invalid offer to buy: not enough cash available');
        return;
    }
    player.cashAvailable -= price;
    let offer = {
        price: price, 
        makerPId: player.id, 
        open: true, 
        buyer: player.id, 
        period: player.periodIndex()
    };
    player.group.offers.new(offer); // Notifies group's players about new offer.
    player.saveAndUpdate();
}
app.messages.makeOfferToSell = function(price) {
    let player = this.participant.player;
    if (player.sharesAvailable < 1) {
        return;
    }
    player.sharesAvailable--;
    console.log('make offer to sell');
    let offer = {price: price, makerPId: player.id, open: true, seller: player.id, period: player.periodIndex()};
    player.group.offers.new(offer);
    player.saveAndUpdate();
}
app.messages.cancelOffer = function(id) {
    let group = this.participant.player.group;
    let offer = group.offers.getRow(id);
    if (!offer.open) {
        return;
    }
    app.closeOffer(offer, group);
    let creator = group.player(offer.makerPId);
    if (offer.seller == creator.id && offer.buyer == null) {
        creator.sharesAvailable++;
    } else if (offer.buyer == creator.id && offer.seller == null) {
        creator.cashAvailable += offer.price;
    }
    creator.saveAndUpdate();
}
app.messages.acceptOTS = function(id) {
    app.acceptOffer(id, 'buy', this.participant.player);
}
app.messages.acceptOTB = function(id) {
    app.acceptOffer(id, 'sell', this.participant.player);
}

// Helper functions
app.closeOffer = function(offer, group) {
    offer.open = false;
    group.offers.save();
    group.emit('offersUpdate', offer);
}
app.acceptOffer = function(id, action, player) {
    
    let group = player.group;
    let offer = group.offers.getRow(id);

    if (!offer.open) {
        return;
    }

    let creator = group.player(offer.makerPId);

    if (action === 'buy') {
        // exit if trade not possible
        if (player.cashAvailable < offer.price) {
            return;
        }
        player.shares++;
        player.sharesAvailable++;
        player.cash = player.cash - offer.price;
        player.cashAvailable = player.cashAvailable - offer.price;
        creator.shares--;
        creator.cash = creator.cash + offer.price;
        creator.cashAvailable = creator.cashAvailable + offer.price;
        offer.buyer = player.id;
    } else if (action === 'sell') {
        // exit if trade not possible
        if (player.sharesAvailable < 1) {
            return;
        }
        player.shares--;
        player.sharesAvailable--;
        player.cash += offer.price;
        player.cashAvailable += offer.price;
        creator.shares++;
        creator.sharesAvailable++;
        creator.cash = creator.cash - offer.price;
        offer.seller = player.id;
    }
    offer.timeElapsed = player.timeInStage();
    group.emit('acceptOffer', {oId: offer.id, time: offer.timeElapsed});
    app.closeOffer(offer, group);

    player.saveAndUpdate();
    creator.saveAndUpdate();

}