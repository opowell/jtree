app.description = 'Fancy version of double auction app.';

const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;

app.insertJtreeRefAtStartOfClientHTML = false;
app.numPeriods = 15;
app.tradingTime = 60;
app.divs        = [0, 8, 28, 60];
app.endowmentShares = 3;
app.endowmentCash = average(app.divs)*app.numPeriods*app.endowmentShares;
app.stageWrapPlayingScreenInFormTag = 'no';
app.numGroups = 1;
app.vueModels = {
    offerPrice: '',
    offerType: '',
};
app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/shared/Chart.min.js"></script>
        <script src="client.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
        <link rel="stylesheet" href="client.css">
    </head>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span id='hi' v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span id='hey' v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

app.vueComputed = {
    offersOpen: function() {
        return this.group.offers.filter((offer) => offer.open && offer.period == this.period.id);
    },
    offersToBuy: function() {
        let out = this.offersOpen.filter((offer) => offer.seller == null);
        return out.sort((a, b) => b.price - a.price);
    },
    offersToSell: function() {
        let out = this.offersOpen.filter((offer) => offer.buyer == null);
        return out.sort((a, b) => a.price - b.price);
    },
    trades: function() {
        return this.group.offers.filter((offer) => offer.buyer != null && offer.seller != null && offer.period == this.period.id)
    },
    selOTS: function() {
        return this.offersToSell.find(x => x.id === this.selOTSId);
    },
    selOTB: function() {
        return this.offersToBuy.find(x => x.id === this.selOTBId);
    },
    bestBid: function() {
        let best = null;
        let offers = this.offersToBuy;
        for (let i=0; i<offers.length; i++) {
            let offer = offers[i];
            if (best == null || best < offer.price) {
                best = offer.price;
            }
        }
        return best;
    },
    bestAsk: function() {
        let best = null;
        let offers = this.offersToSell;
        for (let i=0; i<offers.length; i++) {
            let offer = offers[i];
            if (best == null || best > offer.price) {
                best = offer.price;
            }
        }
        return best;
    },
    lastTradePrice: function() {
        if (this.trades.length < 1) {
            return null;
        }
        return this.trades[this.trades.length-1].price;
    }
}

let tradingStage = app.newStage('trading');
tradingStage.duration = app.tradingTime;
tradingStage.groupStart = function(group) {
    group.addTable('offers');
}
tradingStage.waitOnTimerEnd = false;
tradingStage.playerStart = function(player) {
    let app = player.stage.app;
    // First trading period
    if (player.periodIndex() == 1) {
        player.cash     = app.endowmentCash;
        player.shares   = app.endowmentShares;
    }
    // Not first trading period
    else {
        player.cash     = player.old().cash;
        player.shares   = player.old().shares;
    }
    player.sharesAvailable = player.shares;
    player.cashAvailable = player.cash;
}

tradingStage.activeScreen = `
    <div style='display: flex;'>
        <div style='display: flex; flex-direction: column; flex: 0 0 20rem;'>
            <div class="card text-white bg-dark" style="border-bottom: 2px #FFF solid;">
                <div class="card-body">
                    <h5 class="card-title">Time left (s): {{clock.totalSeconds}}</h5>
                    <div style='color: #AAA'>{{ app.periodText }}: {{period.id}}/{{app.numPeriods}}</div>
                </div>
            </div>
            <div style='display: flex;'>
                <div class="card text-white bg-dark" style="border-bottom: 2px red solid; margin-top: 10px; flex: 1 1 100px">
                    <div class="card-body" style='padding-top: 0px; padding-bottom: 5px;'>
                        <div style='font-size: 30pt'>{{player.cash}}</div>
                        <div style='color: #AAA'>Cash<br>Available: {{player.cashAvailable}}</div>
                    </div>
                </div>
                <div class="card text-white bg-dark" style="margin-left: 10px; border-bottom: 2px red solid; margin-top: 10px; flex: 1 1 100px">
                    <div class="card-body" style='padding-top: 0px; padding-bottom: 6px;'>
                        <div style='font-size: 30pt'>{{player.shares}}</div>
                        <div style='color: #AAA'>Shares<br>Available: {{player.sharesAvailable}}</div>
                    </div>
                </div>
            </div>
            <div class="card text-white bg-dark" style="margin-top: 10px; border-bottom: 2px solid #17a2b8;">
                <div class="card-body">
                    <h5 class="card-title">Order form</h5> 
                    <div class="form-group row">
                        <div class="col-sm-3 col-form-label" style='color: #AAA'>Type:</div>
                        <div class="col-sm-9">
                            <div class="btn-group" role="group">
                                <button id='offerTypeBuyBtn' onclick='setOfferType("buy")' type="button" class="btn btn-secondary">Buy</button>
                                <button id='offerTypeSellBtn' onclick='setOfferType("sell")' type="button" class="btn btn-secondary">Sell</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-sm-3 col-form-label" style='color: #AAA'>Price:</div>
                        <div class="col-sm-9">
                            <div class="btn-group" role="group">
                                <input 
                                    :disabled='(offerType != "buy" && offerType != "sell")'
                                    id='offerPrice'
                                    style='width: 100px'
                                    v-model='offerPrice'
                                    type='number'
                                    min='1'
                                    :max='offerType == "buy" ? player.cashAvailable : "unset"' 
                                    step='1'
                                >
                            </div>
                        </div>
                    </div>
                    <div>
                        <button class='btn' :disabled='
                            (offerType != "buy" && offerType != "sell") ||
                            (offerPrice == "") ||
                            (isNaN(offerPrice)) ||
                            (offerType == "buy" && player.cashAvailable < offerPrice) || 
                            (offerType == "sell" && player.sharesAvailable == 0)'
                            onclick='makeOffer(jt.vue.offerType, jt.vue.offerPrice)'
                        >
                            Make offer
                        </button>
                    </div>
                </div>
            </div>
            <div class="card text-white bg-dark" style="border-bottom: 2px #28a745 solid; flex: 1 1 auto; margin-top: 10px;">
                <div class="card-body">
                    <h5 class="card-title">Order book</h5> 
                    <div style='display: flex;'>
                        <span>
                            <span style='color: #AAA'>Buy offers</span>
                            <br>
                            <!-- Normally you would use v-model='selOTBId', but Vue has problems with timers and selects. -->
                            <select size=5 style='width: 100px' @input="selOTBId = $event.target.value-0">
                                <option v-for='offer in offersToBuy' :value='offer.id' :key='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                                    {{ offer.price }}
                                </option>
                            </select>
                            <br>
                            <div style='padding-top: 5px; padding-right: 5px;' class="btn-group" role="group">
                                <button class='btn' @click='jt.sendMessage("acceptOTB"  , selOTBId)' :disabled='selOTB == null || selOTB.makerPId == player.id || player.shares < 1'>Sell</button>
                                <button class='btn' @click='jt.sendMessage("cancelOffer", selOTBId)' :disabled='selOTB == null || selOTB.makerPId != player.id'>Cancel</button>
                            </div>
                        </span>
                        <span>
                            <span style='color: #AAA'>Sell offers</span>
                            <br>
                            <select size=5 style='width: 100px' @input="selOTSId = $event.target.value-0">
                                <option v-for='offer in offersToSell' :value='offer.id' v-bind:style="offer.makerPId == player.id ? {color: 'blue'} : {}">
                                    {{ offer.price }}
                                </option>
                            </select>
                            <br>
                            <div style='padding-top: 5px; padding-right: 5px;' class="btn-group" role="group">
                                <button class='btn' @click='jt.sendMessage("acceptOTS"  , selOTSId)' :disabled='selOTS == null || selOTS.makerPId == player.id || player.cash < selOTS.price'>Buy</button>
                                <button class='btn' @click='jt.sendMessage("cancelOffer", selOTSId)' :disabled='selOTS == null || selOTS.makerPId != player.id'>Cancel</button>
                            </div>
                        </span>
                    </div>
                </div>
            </div><!-- END CARDS -->
        </div>
        <div style='margin-left: 10px; display: flex; flex-direction: column; flex: 1 1 auto;'>
            <div class="card text-white bg-dark" style="flex: 1 1 auto;">
                <div class="card-body">
                    <h5 class="card-title">Chart</h5>
                    <canvas id="tradesChart" width="600" height="500"></canvas>
                </div>
            </div>
            <div class="card text-white bg-dark" style='margin-top: 10px; flex: 0 1 134px;'>
                <div class="card-body">
                    <h5 class="card-title">Recent trades</h5> 
                    <div style='display: flex; flex-wrap: wrap;'>
                    <span v-for='trade in trades' class='trade'>{{trade.price}}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
`;

let resultsStage = app.newStage('results');
resultsStage.groupStart = function(group) { // when a group starts this stage
    group.dividendDraw = Utils.randomEl(app.divs);
    for (let i in group.players) { // i = 0, 1, 2, 3
        let player = group.players[i];
        player.dividends = player.shares * group.dividendDraw;
        player.cash = player.cash + player.dividends;
        // Points only recorded for last period.
        if (group.period.id === group.app().numPeriods) {
            player.points = player.cash;
        }
    }
}
resultsStage.wrapPlayingScreenInFormTag = 'yes';
resultsStage.addOKButtonIfNone = false;
resultsStage.activeScreen = `
<div style='display: flex; justify-content: center;'>
    <div class="card text-white bg-dark" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Dividends: {{ player.dividends }} E$</h5>
            <div>Inventory: {{ player.shares }} shares</div>
            <div>Dividend draw: {{ group.dividendDraw }} E$/share</div>
            <div>Dividends received: {{ player.dividends }} E$</div>
            <div>Cash (E$): {{ player.cash }}</div>
            <br>
            <button class='btn'>OK</button>
        </div>
    </div>
</div>
`;

app.waitingScreen = `
<div style='display: flex; justify-content: center;'>
    <div class="card text-white bg-dark" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Waiting</h5>
            <div>The experiment will continue soon.</div>
        </div>
    </div>
</div>
`

//  Listen for messages from clients.
app.messages.makeOfferToBuy = function(price) {
    let player = this.participant.player;
    if (player.cashAvailable < price) {
        console.log('tried to make invalid offer to buy: not enough cash available');
        return;
    }
    player.cashAvailable -= price;
    let offer = {
        price: price, 
        makerPId: player.id, 
        open: true, 
        buyer: player.id, 
        period: player.periodIndex()
    };
    player.group.offers.new(offer); // Notifies group's players about new offer.
    player.saveAndUpdate();
}
app.messages.makeOfferToSell = function(price) {
    let player = this.participant.player;
    if (player.sharesAvailable < 1) {
        return;
    }
    player.sharesAvailable--;
    console.log('make offer to sell');
    let offer = {price: price, makerPId: player.id, open: true, seller: player.id, period: player.periodIndex()};
    player.group.offers.new(offer);
    player.saveAndUpdate();
}
app.messages.cancelOffer = function(id) {
    let group = this.participant.player.group;
    let offer = group.offers.getRow(id);
    if (!offer.open) {
        return;
    }
    app.closeOffer(offer, group);
    let creator = group.player(offer.makerPId);
    if (offer.seller == creator.id && offer.buyer == null) {
        creator.sharesAvailable++;
    } else if (offer.buyer == creator.id && offer.seller == null) {
        creator.cashAvailable += offer.price;
    }
    creator.saveAndUpdate();
}
app.messages.acceptOTS = function(id) {
    app.acceptOffer(id, 'buy', this.participant.player);
}
app.messages.acceptOTB = function(id) {
    app.acceptOffer(id, 'sell', this.participant.player);
}

// Helper functions
app.closeOffer = function(offer, group) {
    offer.open = false;
    group.offers.save();
    group.emit('offersUpdate', offer);
}
app.acceptOffer = function(id, action, player) {
    
    let group = player.group;
    let offer = group.offers.getRow(id);

    if (!offer.open) {
        return;
    }

    let creator = group.player(offer.makerPId);

    if (action === 'buy') {
        // exit if trade not possible
        if (player.cashAvailable < offer.price) {
            return;
        }
        player.shares++;
        player.sharesAvailable++;
        player.cash = player.cash - offer.price;
        player.cashAvailable = player.cashAvailable - offer.price;
        creator.shares--;
        creator.cash = creator.cash + offer.price;
        creator.cashAvailable = creator.cashAvailable + offer.price;
        offer.buyer = player.id;
    } else if (action === 'sell') {
        // exit if trade not possible
        if (player.sharesAvailable < 1) {
            return;
        }
        player.shares--;
        player.sharesAvailable--;
        player.cash += offer.price;
        player.cashAvailable += offer.price;
        creator.shares++;
        creator.sharesAvailable++;
        creator.cash = creator.cash - offer.price;
        offer.seller = player.id;
    }
    offer.timeElapsed = player.timeInStage();
    group.emit('acceptOffer', {oId: offer.id, time: offer.timeElapsed});
    app.closeOffer(offer, group);

    player.saveAndUpdate();
    creator.saveAndUpdate();

}