app.description = 'Players vote in groups, votes are implemented once the result has been repeated a certain number of times.';

app.maxNumVotesPerMatch = 50; // How many votes a single group can actually have.
app.numPeriods = 10; // Number of times to re-match participants into new groups.
app.numRequiredMatches = 3; // Number of matches required in a row to trigger an outcome.
app.matchGroupSize   = 3; // Number of players in a voting group.
app.payoffs = [
    [ // P1
        [5, 4],
        [3, 2]
    ],
    [ // P2
        [3, 2],
        [4, 5]
    ],
    [ // P3
        [2, 4],
        [5, 3]
    ],
]
app.getPayoff = function(idInGroup, R0, C0) {
    return app.payoffs[idInGroup-1][R0 ? 0 : 1][C0 ? 0 : 1];
}
app.numGroups = 1;
app.groupMatchingType = 'STRANGER';

let matchStage = app.addSubGame('match');
matchStage.groupSize = app.matchGroupSize;
matchStage.groupMatchingType = 'PARTNER_RANDOM';
matchStage.canGroupContinue = function(group) {
    if (group.payoff)
        return false;
    if (group.period.id > app.maxNumVotesPerMatch)
        return false;
    return true;
}

var decideStage = matchStage.addSubGame('decide');
// Track previous group activity, if any.
decideStage.groupStart = function(group) {
    console.log('starting decide for group ' + group.id);
    let p0 = group.players[0].participant;
    if (p0.payoff == null) {
        p0.payoff = false;
    }
    group.payoff = p0.payoff; // Has the group finished or not.
    group.prevOutcomeR0 = p0.prevOutcomeR0;
    group.prevOutcomeC0 = p0.prevOutcomeC0;
}
decideStage.activeScreen = `
    <p>DECISION</p>
    <p>Group: {{group.id}}</p>
    <p>Make a choice.</p>
    <select name='player.choice' required>
        <option value='a'>00</option>
        <option value='b'>01</option>
        <option value='c'>10</option>
        <option value='d'>11</option>
    </select>
    <button>Make choice</button>
`;

var resultsStage = matchStage.addSubGame('results');
resultsStage.groupStart = function(group) {

    // Groups only last a single period, use participant of first player to store group history
    let p0 = group.players[0].participant;

    // Count number of times group has voted.
    if (p0.numVotes == null) {
        p0.numVotes = 0;
    }
    p0.numVotes++;
    group.numVotes = p0.numVotes;

    // Count votes.
    group.voteR0 = 0;
    group.voteR1 = 0;
    group.voteC0 = 0;
    group.voteC1 = 0
    for (let p in group.players) {
        switch (group.players[p].choice) {
            case 'a':
                group.voteR0++;
                group.voteC0++;
                break;
            case 'b':
                group.voteR0++;
                group.voteC1++;
                break;
            case 'c':
                group.voteR1++;
                group.voteC0++;
                break;
            case 'd':
                group.voteR1++;
                group.voteC1++;
                break;
        }
    }

    // Determine outcome.
    group.outcomeR0 = group.voteR0 > group.voteR1;
    group.outcomeC0 = group.voteC0 > group.voteC1;
    
    // Compare with previous outcome.
    group.matchesLastRound = 
        group.outcomeR0 === group.prevOutcomeR0 &&
        group.outcomeC0 === group.prevOutcomeC0
    ;

    // Calculate number of consecutive matches
    if (group.matchesLastRound) {
        // Initialize variable, if necessary.
        if (p0.numMatches == null) {
            p0.numMatches = 0;
        }
        // Increment counter.
        group.numMatches = p0.numMatches + 1;
    } 
    // No match, reset counter.
    else {
        group.numMatches = 0;
    }

    // If sufficient number of matches, calculate payoffs and signal for rematching.
    if (group.numMatches >= app.numRequiredMatches) {
        group.payoff = true;
        for (let p in group.players) {
            group.players[p].points = app.getPayoff(group.players[p].idInGroup, group.outcomeR0, group.outcomeC0);
        }
    }

    // Record values to carry over to next period.
    p0.prevOutcomeR0 = group.outcomeR0;
    p0.prevOutcomeC0 = group.outcomeC0;
    p0.numMatches = group.numMatches;
    p0.numVotes = group.numVotes;
    p0.payoff = group.payoff;
}
resultsStage.activeScreen = `
    <p>RESULTS</p>
    <p>Votes: {{group.numVotes}}</p>
    <p>Matches: {{group.numMatches}}</p>
    <p>Outcome of R0: {{group.outcomeR0}}</p>
    <p>Outcome of C0: {{group.outcomeC0}}</p>
    <p v-if='group.outcomeR0 == true'>
        Your payoff in this period is {{player.points}} E$.
    </p>
    <p v-if='group.outcomeR0 == false'>
        Not enough matches yet, please continue.
    </p>
`;
